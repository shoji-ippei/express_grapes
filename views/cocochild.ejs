<!DOCTYPE html>
<html>
  <head>
    <title>ココチャイルド</title>

    <link rel="stylesheet" href="stylesheets/grapes.min.css">
    <link rel="stylesheet" href="stylesheets/grapesjs-preset-webpage.min.css">
    <link rel="stylesheet" href="stylesheets/toastr.min.css">
    <link rel="stylesheet" href="stylesheets/tooltip.css">
    <link rel="stylesheet" href="stylesheets/grapesjs-plugin-filestack.css">
    <link rel="stylesheet" href="stylesheets/demos.css">

    <script src="javascripts/grapes.js"></script>
    <script src="javascripts/grapesjs-preset-webpage.min.js"></script>
    <script src="javascripts/grapesjs-blocks-basic.min.js"></script>
    <script src="javascripts/grapesjs-lory-slider.min.js?0.1.5"></script>
    <script src="javascripts/grapesjs-tabs.min.js?0.1.1"></script>

  </head>
  <body>

    <div id="gjs"></div>

    <script type="text/javascript">
      var lp = './public/images/';
      var images = [
        lp+'check_icon.png', lp+'download.png', lp+'head_back.svg', lp+'sub_title_icon.png', lp+'content_icon.png', lp+'footer_back.svg', lp+'step_img.png', lp+'title_icon.png'
      ];
      var editor = grapesjs.init({
          height: '100%',
          container : '#gjs',
          fromElement: true,
          showOffsets: 1,
          assetManager: {
            uploadText: 'ここにドラック＆ドロップしてボタンを押してください',
            addBtnText: '画像を追加',
            assets: images
          },
          styleManager: { clearProperties: 1 },
          plugins: ['gjs-preset-webpage', 'gjs-blocks-basic', 'grapesjs-lory-slider'],
          pluginsOpts: {
            'grapesjs-lory-slider': {
              sliderBlock: {
                category: 'Extra'
              }
            },
            'grapesjs-tabs': {
              tabsBlock: {
                category: 'Extra'
              }
            },
            'gjs-preset-webpage': {
              modalImportTitle: '既存ファイルのインポート',
              modalImportLabel: '<div style="margin-bottom: 10px; font-size: 13px;">既存のHTML/CSSファイルをペースとしてインポートをクリックしてください</div>',
              modalImportContent: function(editor) {
                return editor.getHtml() + '<style>'+editor.getCss()+'</style>'
              },
              filestackOpts: false,//{ key: 'AYmqZc2e8RLGLE7TGkX3Hz' },
              aviaryOpts: false,//{ key: '1' },
              blocksBasicOpts: { flexGrid: 1 },
              customStyleManager: [{
                name: 'General',
                buildProps: ['float', 'display', 'position', 'top', 'right', 'left', 'bottom'],
                properties:[{
                    name: 'Alignment',
                    property: 'float',
                    type: 'radio',
                    defaults: 'none',
                    list: [
                      { value: 'none', className: 'fa fa-times'},
                      { value: 'left', className: 'fa fa-align-left'},
                      { value: 'right', className: 'fa fa-align-right'}
                    ],
                  },
                  { property: 'position', type: 'select'}
                ],
              },{
                  name: 'Dimension',
                  open: false,
                  buildProps: ['width', 'flex-width', 'height', 'max-width', 'min-height', 'margin', 'padding'],
                  properties: [{
                    id: 'flex-width',
                    type: 'integer',
                    name: 'Width',
                    units: ['px', '%'],
                    property: 'flex-basis',
                    toRequire: 1,
                  },{
                    property: 'margin',
                    properties:[
                      { name: 'Top', property: 'margin-top'},
                      { name: 'Right', property: 'margin-right'},
                      { name: 'Bottom', property: 'margin-bottom'},
                      { name: 'Left', property: 'margin-left'}
                    ],
                  },{
                    property  : 'padding',
                    properties:[
                      { name: 'Top', property: 'padding-top'},
                      { name: 'Right', property: 'padding-right'},
                      { name: 'Bottom', property: 'padding-bottom'},
                      { name: 'Left', property: 'padding-left'}
                    ],
                  }],
                },{
                  name: 'Typography',
                  open: false,
                  buildProps: ['font-family', 'font-size', 'font-weight', 'letter-spacing', 'color', 'line-height', 'text-align', 'text-decoration', 'text-shadow'],
                  properties:[
                    { name: 'Font', property: 'font-family'},
                    { name: 'Weight', property: 'font-weight'},
                    { name:  'Font color', property: 'color'},
                    {
                      property: 'text-align',
                      type: 'radio',
                      defaults: 'left',
                      list: [
                        { value : 'left',  name : 'Left',    className: 'fa fa-align-left'},
                        { value : 'center',  name : 'Center',  className: 'fa fa-align-center' },
                        { value : 'right',   name : 'Right',   className: 'fa fa-align-right'},
                        { value : 'justify', name : 'Justify',   className: 'fa fa-align-justify'}
                      ],
                    },{
                      property: 'text-decoration',
                      type: 'radio',
                      defaults: 'none',
                      list: [
                        { value: 'none', name: 'None', className: 'fa fa-times'},
                        { value: 'underline', name: 'underline', className: 'fa fa-underline' },
                        { value: 'line-through', name: 'Line-through', className: 'fa fa-strikethrough'}
                      ],
                    },{
                      property: 'text-shadow',
                      properties: [
                        { name: 'X position', property: 'text-shadow-h'},
                        { name: 'Y position', property: 'text-shadow-v'},
                        { name: 'Blur', property: 'text-shadow-blur'},
                        { name: 'Color', property: 'text-shadow-color'}
                      ],
                  }],
                },{
                  name: 'Decorations',
                  open: false,
                  buildProps: ['opacity', 'background-color', 'border-radius', 'border', 'box-shadow', 'background'],
                  properties: [{
                    type: 'slider',
                    property: 'opacity',
                    defaults: 1,
                    step: 0.01,
                    max: 1,
                    min:0,
                  },{
                    property: 'border-radius',
                    properties  : [
                      { name: 'Top', property: 'border-top-left-radius'},
                      { name: 'Right', property: 'border-top-right-radius'},
                      { name: 'Bottom', property: 'border-bottom-left-radius'},
                      { name: 'Left', property: 'border-bottom-right-radius'}
                    ],
                  },{
                    property: 'box-shadow',
                    properties: [
                      { name: 'X position', property: 'box-shadow-h'},
                      { name: 'Y position', property: 'box-shadow-v'},
                      { name: 'Blur', property: 'box-shadow-blur'},
                      { name: 'Spread', property: 'box-shadow-spread'},
                      { name: 'Color', property: 'box-shadow-color'},
                      { name: 'Shadow type', property: 'box-shadow-type'}
                    ],
                  },{
                    property: 'background',
                    properties: [
                      { name: 'Image', property: 'background-image'},
                      { name: 'Repeat', property:   'background-repeat'},
                      { name: 'Position', property: 'background-position'},
                      { name: 'Attachment', property: 'background-attachment'},
                      { name: 'Size', property: 'background-size'}
                    ],
                  },],
                },{
                  name: 'Extra',
                  open: false,
                  buildProps: ['transform'],
                  properties: [{
                    property: 'transform',
                    properties:[
                      { name: 'Rotate X', property: 'transform-rotate-x'},
                      { name: 'Rotate Y', property: 'transform-rotate-y'},
                      { name: 'Rotate Z', property: 'transform-rotate-z'},
                      { name: 'Scale X', property: 'transform-scale-x'},
                      { name: 'Scale Y', property: 'transform-scale-y'},
                      { name: 'Scale Z', property: 'transform-scale-z'}
                    ],
                  }]
                }],
            },
            // 'gjs-plugin-ckeditor': {
            //   position: 'center',
            //   options: {
            //     customConfig: '',
            //     language: 'jp',
            //
            //     startupFocus: true,
        		// 		extraAllowedContent: '*(*);*{*}', // Allows any class and any inline style
        		// 		allowedContent: true, // Disable auto-formatting, class removing, etc.
        		// 		//enterMode: CKEDITOR.ENTER_BR,
        		// 		extraPlugins: 'sharedspace,colorbutton,panelbutton,font',
            //
            //     toolbar: [
            //   			{ name: 'clipboard', items: [ 'Undo', 'Redo' ] },
            //   			{ name: 'styles', items: [ 'Format', 'Font', 'FontSize' ] },
            //   			{ name: 'basicstyles', items: [ 'Bold', 'Italic', 'Underline', 'Strike', 'RemoveFormat', 'CopyFormatting' ] },
            //   			{ name: 'colors', items: [ 'TextColor', 'BGColor' ] },
            //   			//{ name: 'align', items: [ 'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock' ] },
            //   			{ name: 'links', items: [ 'Link', 'Unlink' ] },
            //   			{ name: 'paragraph', items: [ 'NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'Blockquote' ] }
            //       ]
            //   }
            // }
        },

      });

        var pn = editor.Panels;
        var modal = editor.Modal;
        editor.Commands.add('canvas-clear', function() {
          if(confirm('すべてのキャンバス上の要素が削除されます。よろしいですか？')) {
            var comps = editor.DomComponents.clear();
            setTimeout(function(){ localStorage.clear()}, 0)
          }
        });
        // Add info command
        var cmdm = editor.Commands;
        var mdlClass = 'gjs-mdl-dialog-sm';
        var infoContainer = document.getElementById('info-panel');
        cmdm.add('open-info', function() {
          var mdlDialog = document.querySelector('.gjs-mdl-dialog');
          mdlDialog.className += ' ' + mdlClass;
          infoContainer.style.display = 'block';
          modal.setTitle('About this demo');
          modal.setContent(infoContainer);
          modal.open();
          modal.getModel().once('change:open', function() {
            mdlDialog.className = mdlDialog.className.replace(mdlClass, '');
          })
        });
        pn.addButton('options', {
          id: 'open-info',
          className: 'fa fa-question-circle',
          command: function() { editor.runCommand('open-info') },
          attributes: {
            'title': 'About',
            'data-tooltip-pos': 'bottom',
          },
        });
        // Simple warn notifier
        var origWarn = console.warn;
        toastr.options = {
          closeButton: true,
          preventDuplicates: true,
          showDuration: 250,
          hideDuration: 150
        };
        console.warn = function (msg) {
          if (msg.indexOf('[undefined]') == -1) {
            toastr.warning(msg);
          }
          origWarn(msg);
        };
        // Add and beautify tooltips
        [['sw-visibility', 'Show Borders'], ['preview', 'Preview'], ['fullscreen', 'Fullscreen'],
         ['undo', 'Undo'], ['redo', 'Redo'], ['canvas-clear', 'Clear canvas']]
        .forEach(function(item) {
          pn.getButton('options', item[0]).set('attributes', {title: item[1], 'data-tooltip-pos': 'bottom'});
        });
        [['open-sm', 'Style Manager'], ['open-layers', 'Layers'], ['open-blocks', 'Blocks']]
        .forEach(function(item) {
          pn.getButton('views', item[0]).set('attributes', {title: item[1], 'data-tooltip-pos': 'bottom'});
        });
        var titles = document.querySelectorAll('*[title]');
        for (var i = 0; i < titles.length; i++) {
          var el = titles[i];
          var title = el.getAttribute('title');
          title = title ? title.trim(): '';
          if(!title)
            break;
          el.setAttribute('data-tooltip', title);
          el.setAttribute('title', '');
        }
        // Show borders by default
        pn.getButton('options', 'sw-visibility').set('active', 1);
        // Store and load events
        editor.on('storage:load', function(e) { console.log('Loaded ', e) });
        editor.on('storage:store', function(e) { console.log('Stored ', e) });
        // Do stuff on load
        editor.on('load', function() {
          var $ = grapesjs.$;
          // Show logo with the version
          var logoCont = document.querySelector('.gjs-logo-cont');
          document.querySelector('.gjs-logo-version').innerHTML = 'v' + grapesjs.version;
          var logoPanel = document.querySelector('.gjs-pn-commands');
          logoPanel.appendChild(logoCont);
          // Load and show settings and style manager
          var openTmBtn = pn.getButton('views', 'open-tm');
          openTmBtn && openTmBtn.set('active', 1);
          var openSm = pn.getButton('views', 'open-sm');
          openSm && openSm.set('active', 1);
          // Add Settings Sector
          var traitsSector = $('<div class="gjs-sm-sector no-select">'+
            '<div class="gjs-sm-title"><span class="icon-settings fa fa-cog"></span> Settings</div>' +
            '<div class="gjs-sm-properties" style="display: none;"></div></div>');
          var traitsProps = traitsSector.find('.gjs-sm-properties');
          traitsProps.append($('.gjs-trt-traits'));
          $('.gjs-sm-sectors').before(traitsSector);
          traitsSector.find('.gjs-sm-title').on('click', function(){
            var traitStyle = traitsProps.get(0).style;
            var hidden = traitStyle.display == 'none';
            if (hidden) {
              traitStyle.display = 'block';
            } else {
              traitStyle.display = 'none';
            }
          });
          // Open block manager
          var openBlocksBtn = editor.Panels.getButton('views', 'open-blocks');
          openBlocksBtn && openBlocksBtn.set('active', 1);

        });

        // var bm = editor.BlockManager;
        //
        // bm.add('table', {label: 'Table',
        //    content: '<table></table>',
        //    category: 'Basic',
        //    attributes: {
        //      title: 'テーブル'
        //    }
        //  });


    </script>

  </body>
</html>
